# -*- org-use-property-inheritance: t; -*-
#+TITLE: Debugging kubeadm-dind-audit-logging
#+AUTHOR: Hippie Hacker
#+EMAIL: hh@ii.coop
#+CREATOR: ii.coop
#+DATE: August 22nd, 2018

* Branch Setup

https://github.com/ii/kubeadm-dind-cluster/tree/audit-policy

https://github.com/kubernetes-sigs/kubeadm-dind-cluster/pull/204

#+NAME: kubeadm source checkout
#+BEGIN_SRC tmux :session k8s:kubeadm-dind
#git clone git@github.com:kubernetes-sigs/kubeadm-dind-cluster.git ~/dind
git clone git@github.com:ii/kubeadm-dind-cluster.git ~/dind
git checkout -b audit-policy origin/audit-policy
#+END_SRC

* kubeadm-dind with k8s source

https://github.com/kubernetes-sigs/kubeadm-dind-cluster#using-with-kubernetes-source  

#+NAME: kubeadm Build kubeadm-dind-cluster
#+BEGIN_SRC tmux :session k8s:kubeadm-dind
  cd ~/dind/
  ./build/build-local.sh
#+END_SRC

#+NAME: kubeadm deploy
#+BEGIN_SRC tmux :session k8s:kubeadm-dind
  cd ~/dind/
  ./build/build-local.sh
  cd ~/go/src/k8s.io/kubernetes
  export BUILD_KUBEADM=y
  export BUILD_HYPERKUBE=y
  export DIND_IMAGE=mirantis/kubeadm-dind-cluster:local
  ~/dind/dind-cluster.sh up
#+END_SRC

* Testing

#+NAME: kubeadm deploy
#+BEGIN_SRC tmux :session k8s:kubeadm-dind
cd ~/go/src/k8s.io/kubernetes
~/dind/dind-cluster.sh e2e '\[Conformance\]' '\[Slow\]|\[Serial\]|\[Disruptive\]|\[Flaky\]|\[Feature:.+\]'
#+END_SRC

* Debugging
:PROPERTIES:
:header-args:shell: :wrap SRC js :results output verbatim code
:END:
** kubeadm config view on kube-master

#+NAME: kubeadm config view on kube-master
#+BEGIN_SRC shell 
docker exec kube-master kubeadm config view --kubeconfig /etc/kubernetes/admin.conf
#+END_SRC

#+NAME: kubeadm config view on kube-master results
#+BEGIN_SRC js
api:
  advertiseAddress: 172.18.0.2
  bindPort: 6443
  controlPlaneEndpoint: ""
apiServerExtraArgs:
  authorization-mode: Node,RBAC
  feature-gates: MountPropagation=true,AdvancedAuditing=true
  insecure-bind-address: 0.0.0.0
  insecure-port: "8080"
apiVersion: kubeadm.k8s.io/v1alpha3
auditPolicy:
  logDir: /etc/kubernetes/audit/
  logMaxAge: 2
  path: /etc/kubernetes/audit-policy.yaml
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controllerManagerExtraArgs:
  feature-gates: MountPropagation=true,AdvancedAuditing=true
etcd:
  local:
    dataDir: /var/lib/etcd
    image: ""
featureGates:
  CoreDNS: false
imageRepository: k8s.gcr.io
kind: InitConfiguration
kubernetesVersion: v1.13.0
networking:
  dnsDomain: cluster.local
  podSubnet: ""
  serviceSubnet: 10.96.0.0/12
nodeRegistration: {}
schedulerExtraArgs:
  feature-gates: MountPropagation=true,AdvancedAuditing=true
unifiedControlPlaneImage: mirantis/hypokube:final
#+END_SRC

** arguments on APIServer container

#+NAME: APIServer container Args
#+BEGIN_SRC shell
  APISERVER=$(docker exec kube-master \
    docker ps --format '{{.Names}}' \
    --filter label=io.kubernetes.container.name=kube-apiserver) 
  docker exec kube-master \
    docker inspect $APISERVER \
      | jq .[0].Args
#+END_SRC

#+NAME: APIServer container Args Results
#+BEGIN_SRC js
[
  "--authorization-mode=Node,RBAC",
  "--feature-gates=MountPropagation=true,AdvancedAuditing=true",
  "--advertise-address=172.18.0.2",
  "--allow-privileged=true",
  "--client-ca-file=/etc/kubernetes/pki/ca.crt",
  "--enable-admission-plugins=NodeRestriction",
  "--enable-bootstrap-token-auth=true",
  "--etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt",
  "--etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt",
  "--etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key",
  "--etcd-servers=https://127.0.0.1:2379",
  "--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt",
  "--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key",
  "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
  "--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt",
  "--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key",
  "--requestheader-allowed-names=front-proxy-client",
  "--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt",
  "--requestheader-extra-headers-prefix=X-Remote-Extra-",
  "--requestheader-group-headers=X-Remote-Group",
  "--requestheader-username-headers=X-Remote-User",
  "--secure-port=6443",
  "--service-account-key-file=/etc/kubernetes/pki/sa.pub",
  "--service-cluster-ip-range=10.96.0.0/12",
  "--tls-cert-file=/etc/kubernetes/pki/apiserver.crt",
  "--tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
  "--insecure-bind-address=0.0.0.0",
  "--insecure-port=8080"
]
#+END_SRC

* Shoutouts
** #sig-cluster-lifecycle

*** Paul Michali [12:16 AM]
@hh You run build/build-local.sh and then set DIND_IMAGE to use that locally built docker image for k-d-c (export DIND_IMAGE=mirantis/kubeadm-dind-cluster:local).


*** Leigh Capili [7:16 AM]
@hh, use `apiServerExtraVolumes` for kubeadm section of the volume mounts
it's an array of HostPathMounts which you can specify as writeable:
https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm#HostPathMount


* Footnotes
** tmate debugging

#+NAME: create master shell
#+BEGIN_SRC tmux :session k8s:kubeadm-master
docker exec -ti kube-master /bin/bash
export APISERVER=$(docker ps --filter label=io.kubernetes.container.name=kube-apiserver --format '{{.Names}}')
export PS1='# MASTER \$ '
#+END_SRC

#+NAME: run commands on master
#+BEGIN_SRC tmux :session k8s:kubeadm-master
  export APISERVER=$(docker ps --filter label=io.kubernetes.container.name=kube-apiserver --format '{{.Names}}')
  # cat /etc/kubeadm.conf
  # #
  docker ps | grep -v pause\\\|dns\\\|etcd
  docker inspect $APISERVER | jq .[0].Args
#+END_SRC

#+NAME: create apiserver shell
#+BEGIN_SRC tmux :session k8s:kubeadm-apiserver
#MASTER=$(docker ps --filter label=mirantis.kubeadm_dind_cluster --format "{{.Names}}")
docker exec -ti kube-master /bin/bash
APISERVER=$(docker ps --filter label=io.kubernetes.container.name=kube-apiserver --format '{{.Names}}')
docker exec -ti $APISERVER /bin/bash
export PS1='# APISERVER \$ '
#docker logs $APISERVER 
#+END_SRC

#+NAME: exploring issues
#+BEGIN_SRC tmux :session k8s:kubeadm-apiserver
clear
ps axuwww | grep apiserver
#+END_SRC

#+NAME: apiserver unrecocnized flag
#+BEGIN_EXAMPLE
# from docker logs on apiserver
invalid argument "MountPropagation=true,Auditing=true" for "--feature-gates" flag: unrecognized key: Auditing
#+END_EXAMPLE


# Local Variables:
# eval: (require (quote ob-shell))
# eval: (require (quote ob-lisp))
# eval: (require (quote ob-emacs-lisp))
# eval: (require (quote ob-js))
# eval: (require (quote ob-go))
# org-confirm-babel-evaluate: nil
# End:


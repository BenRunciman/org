# -*- org-use-property-inheritance: t; -*-
#+TITLE: Setting up Gitlab
#+AUTHOR: Hippie Hacker and James Blair
#+EMAIL: hh@ii.coop and mail@jamesblair.net
#+CREATOR: ii.coop + Inland Revenue
#+DATE: 5th of October, 2018

* Preparing to use the Gitlab Chart
  
Gitlab provides [[https://gitlab.com/charts/gitlab/blob/master/doc/installation/README.md][some decent documentation]] including a [[https://gitlab.com/charts/gitlab/blob/master/doc/cloud/gke.md#scripted-cluster-creation-on-gke][script to spin up a cluster on gke]].

This section mostly follows that guide.

** Install Helm

There are other ways, but this is the most succinct.

#+NAME: Install Helm
#+BEGIN_SRC tmux :session br:gitlab
curl -L https://storage.googleapis.com/kubernetes-helm/helm-v2.10.0-linux-amd64.tar.gz \
  | tar xvz -f - --strip-components 1 -C /usr/local/bin
#+END_SRC

** Download the gitlab chart source

We mainly need this for the GKE Setup Script for now.

#+NAME: Go get gitlab chart
#+BEGIN_SRC tmux :session br:gitlab
git clone git@gitlab.com:charts/gitlab.git ~/gitlab
#+END_SRC

** GKE Setup Script

You'll need to customize this with an project of your own.

*** Verify your gcloud credentials 

   There are various ways to authenticate, we will just ensure the correct
   account is active.

   #+NAME: Verify your gcloud credentials
   #+BEGIN_SRC shell :exports both :results code
   gcloud auth list
   #+END_SRC

   #+RESULTS: Verify your gcloud credentials
   #+BEGIN_SRC shell
            Credentialed Accounts
   ACTIVE             ACCOUNT
   ,*                  hh@ii.coop
   #+END_SRC

*** Choose a gcloud project

Choose an account from your available ones.

#+NAME: List your gcloud projects
#+BEGIN_SRC shell :exports both :results code
gcloud projects list
#+END_SRC

#+RESULTS: List your gcloud projects
#+BEGIN_SRC shell
PROJECT_ID         NAME               PROJECT_NUMBER
cncf-gitlab        cncf-gitlab        368775700279
gitlab-ii-coop     GitLab-ii-coop     916237797088
ii-coop            ii-coop            46173955477
ii-enspiral        ii-enspiral        135963852157
kubernetes-public  kubernetes-public  127754664067
openci-io          openci             434061009048
recode-215103      recode             334208224319
recodenz           recodenz           754872138011
#+END_SRC

*** Up the cluster using the gitlab gke script

You'll need to set the 'PROJECT' environment variable to the name of your chosen
gke project, then run the script with the 'up' parameter.

#+NAME: Use gitlab gke script
#+BEGIN_SRC tmux :session br:gitlab
cd ~/gitlab
export PROJECT=recodenz
./scripts/gke_bootstrap_script.sh up
#+END_SRC

*** Verify that the external-dns has started

#+NAME: Verify that external-dns has started, run:
#+BEGIN_SRC shell :results code
kubectl --namespace=kube-system get pods -l "app=external-dns,release=dns"
#+END_SRC

#+RESULTS: Verify that external-dns has started, run:
#+BEGIN_SRC shell
NAME                               READY   STATUS    RESTARTS   AGE
dns-external-dns-fb98777fb-xl276   1/1     Running   0          8m46s
#+END_SRC

** Create an external IP

We will need the external IP to point our DNS subdomain DNS to. Additionally we
will use that ip within the gitlab chart.

We first create an external-ip

#+NAME: Create the external IP
#+BEGIN_SRC tmux :session br:gitlab
export PROJECT=recodenz
export CLUSTER_NAME=gitlab-cluster
export REGION=us-central1
gcloud compute addresses create ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT
#+END_SRC

#+NAME: Retrieve ingress IP
#+BEGIN_SRC tmux :session br:gitlab
export PROJECT=recodenz
export CLUSTER_NAME=gitlab-cluster
export REGION=us-central1
gcloud compute addresses describe ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT --format='value(address)'
#+END_SRC

#+NAME: ingress_ip
#+BEGIN_SRC shell 
export PROJECT=recodenz
export CLUSTER_NAME=gitlab-cluster
export REGION=us-central1
gcloud compute addresses describe ${CLUSTER_NAME}-external-ip --region $REGION --project $PROJECT --format='value(address)'
#+END_SRC

#+RESULTS: ingress_ip
: 35.193.219.220

** Setup / Verify wildcard DNS for *.recode.ii.nz

Until we self host in NZ on ii infra, we are using dnsimple, though you could use anything.

This is just to verify that we have wildcard DNS setup.

Ensure this matches our IP

#+NAME: dig checks for *.recode.ii.nz
#+BEGIN_SRC shell :results verbatim code :var INGRESS=ingress_ip
dig foo.recode.ii.nz | grep ii.nz
dig bar.recode.ii.nz | grep ii.nz
echo "*****This should point to _${INGRESS}_*****"
#+END_SRC

#+RESULTS: dig checks for *.recode.ii.nz
#+BEGIN_SRC shell
; <<>> DiG 9.10.3-P4-Debian <<>> foo.recode.ii.nz
;foo.recode.ii.nz.		IN	A
foo.recode.ii.nz.	35	IN	A	35.193.219.220
; <<>> DiG 9.10.3-P4-Debian <<>> bar.recode.ii.nz
;bar.recode.ii.nz.		IN	A
bar.recode.ii.nz.	35	IN	A	35.193.219.220
,*****This should point to _35.193.219.220_*****
#+END_SRC

* Deploy Using the Gitlab Chart

** Configure helm to use charts.gitlab.io

#+NAME: Get Chart for gitlab
#+BEGIN_SRC tmux :session br:gitlab
helm repo add gitlab https://charts.gitlab.io/
helm repo update
#+END_SRC

#+NAME: Get Chart for gitlab
#+BEGIN_SRC shell :results code
helm repo add gitlab https://charts.gitlab.io/
helm repo update
#+END_SRC

#+RESULTS: Get Chart for gitlab
#+BEGIN_SRC shell
"gitlab" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Skip local chart repository
...Successfully got an update from the "gitlab" chart repository
...Successfully got an update from the "stable" chart repository
Update Complete. ⎈ Happy Helming!⎈ 
#+END_SRC

#+NAME: Verify we have the charts
#+BEGIN_SRC shell :results code
helm search gitlab/gitlab
#+END_SRC

#+RESULTS: Verify we have the charts
#+BEGIN_SRC shell
NAME                 	CHART VERSION	APP VERSION	DESCRIPTION                                                 
gitlab/gitlab        	1.1.3        	11.3.3     	Web-based Git-repository manager with wiki and issue-trac...
gitlab/gitlab-omnibus	0.1.37       	           	GitLab Omnibus all-in-one bundle                            
gitlab/gitlab-runner 	0.1.34       	           	GitLab Runner                                               
#+END_SRC

** Getting our secrets

IN this section, we setup a secrets.env that looks similar to this:

#+NAME: secrets.env
#+BEGIN_SRC shell :noeval
SMTP_USER_NAME="postmaster@recode.ii.nz"
SMTP_PASSWORD="apassword"
OMNIAUTH_GITHUB_APP_ID=dexxxxxxxxxxxxxxxx888a
OMNIAUTH_GITHUB_APP_SECRET=27exxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx814
OMNIAUTH_GOOGLE_APP_ID=75xxxxxxx011-mo0xxxxxxxxxxxxxxxxxxv77vo.apps.googleusercontent.com
OMNIAUTH_GOOGLE_APP_SECRET=gcPxxxxxxxxxxxxxoJaOM
#+END_SRC

*** User Name for SMTP

We use mailgun for now, until there is a smtp.ii.nz

#+NAME: smtp_user_name
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $SMTP_USER_NAME
#+END_SRC

#+NAME: smtp_password
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $SMTP_PASSWORD
#+END_SRC

*** Github Oauth
#+NAME: omniauth_github_app_id
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GITHUB_APP_ID
#+END_SRC

#+NAME: omniauth_github_app_secret
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GITHUB_APP_SECRET
#+END_SRC

*** Google Oauth
#+NAME: omniauth_google_app_id
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GOOGLE_APP_ID
#+END_SRC

#+NAME: omniauth_google_app_secret
#+BEGIN_SRC shell :results output silent
. secrets.env ; echo -n $OMNIAUTH_GOOGLE_APP_SECRET
#+END_SRC

** Configure the Chart

#+NAME: The Config
#+BEGIN_SRC yaml :tangle ../gitlab/recode.gitlab.yaml :noweb yes
  # Global chart properties
  global:
    hosts:
      domain: recode.ii.nz
      externalIP: <<ingress_ip()>>
    # Outgoing email server settings
  #   smtp:
  #     enabled: true
  #     address: smtp.mailgun.org
  #     port: 2525
  #     user_name: "<<smtp_user_name()>>"
  #     password: "<<smtp_password()>>"
  #       # Needs to be stored as a k8s secret
  #       # this is the key, not the value
  #       #secret: "<<smtp_password()>>"
  #       #key: password
  #     #domain: recode.ii.nz
  #     authentication: "plain"
  #     starttls_auto: false
  #     openssl_verify_mode: "peer"
 # Email persona used in email sent by GitLab
    email:
     from: 'gitlab@recode.ii.nz'
     display_name: GitLab@recode.ii.nz
     reply_to: 'hh@ii.coop'
     subject_suffix: ' | ii.nz'
    time_zone: NZST
    timeout: 600
  certmanager-issuer:
    email: recode@ii.nz
  gitlab:
    migrations:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-rails-ce
    sidekiq:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
    sidekiq:
      image:
       repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-unicorn-ce
    sidekiq:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
    omniauth:
      enabled: yes
      autoSignInWithProvider: 
      allowSingleSignOn: ['github', 'google_oauth2']
      blockAutoCreatedUsers: false
      providers:
        - key: 'github'
          app_id: "<<omniauth_github_app_id()>>"
          app_secret: "<<omniauth_github_app_secret()>>"
        - key: 'google_oauth2'
          app_id: "<<omniauth_google_app_id()>>"
          app_secret: "<<omniauth_google_app_secret()>>"
      syncProfileAttributes: ['email']
#+END_SRC

** Verify cluster

We could run other commands, but this is enough for now.

#+NAME: Verify Cluster
#+BEGIN_SRC shell :results code
(
kubectl get pods --all-namespaces
) 2>&1
#+END_SRC

#+RESULTS: Verify Cluster
#+BEGIN_SRC shell
NAMESPACE     NAME                                                       READY   STATUS    RESTARTS   AGE
kube-system   dns-external-dns-fb98777fb-xl276                           1/1     Running   0          51m
kube-system   event-exporter-v0.1.9-5c8fb98cdb-pcp6g                     2/2     Running   0          53m
kube-system   fluentd-gcp-v2.0.17-m7cl4                                  2/2     Running   0          53m
kube-system   fluentd-gcp-v2.0.17-vmqvm                                  2/2     Running   0          53m
kube-system   heapster-v1.5.2-68bf4d4889-7ts7x                           3/3     Running   0          51m
kube-system   kube-dns-5dcfcbf5fb-czj25                                  4/4     Running   0          53m
kube-system   kube-dns-5dcfcbf5fb-hqfz5                                  4/4     Running   0          52m
kube-system   kube-dns-autoscaler-69c5cbdcdd-9f8r2                       1/1     Running   0          53m
kube-system   kube-proxy-gke-gitlab-cluster-default-pool-ad84c32e-c7gp   1/1     Running   0          53m
kube-system   kube-proxy-gke-gitlab-cluster-default-pool-ad84c32e-nhsk   1/1     Running   0          53m
kube-system   kubernetes-dashboard-76f945f76-s58bp                       1/1     Running   0          53m
kube-system   l7-default-backend-57856c5f55-w8hn2                        1/1     Running   0          53m
kube-system   metrics-server-v0.2.1-7f8dd98c8f-k66rb                     2/2     Running   0          51m
kube-system   tiller-deploy-5c99b8bcbf-6hp5t                             1/1     Running   0          52m
#+END_SRC

** Deploy Gitlab on Kubernetes 


*** Use the values yaml generated above to deploy gitlab

#+NAME: Deploy Gitlab on Kubernetes
#+BEGIN_SRC tmux :session br:deploy
helm upgrade --install gitlab gitlab/gitlab --values ~/gitlab/recode.gitlab.yaml
#+END_SRC
*** You can fully cleanup / purge as to start over
#+NAME: Destroy / Purge helm deployment of gitlab to try again
#+BEGIN_SRC tmux :session br:deploy
helm delete --purge gitlab
#+END_SRC

*** Remove your cluster from gke (can get expensive if you leave it up)

This can be useful if you want to debug the deployment, iterate over different
configurations for testing.

#+NAME: Destroy / Purge GKE cluster
#+BEGIN_SRC tmux :session br:deploy
cd ~/gitlab
export PROJECT=recodenz
./scripts/gke_bootstrap_script.sh down
#+END_SRC

* Monitor the Progress of your gitlab installation

** See how they run

#+NAME: see how the run
#+BEGIN_SRC tmux :session br:gitlab
helm status gitlab
#+END_SRC

** Get root password

#+NAME: get root password
#+BEGIN_SRC tmux :session br:gitlab
kubectl get secret gitlab-gitlab-initial-root-password -ojsonpath={.data.password} | base64 --decode ; echo
#+END_SRC

** TODO SMTP OUTGOING
** TODO Setup Inbound Email
*** Setup SMTP Server
*** Configure GitLab to retrieve

* Footnotes
# Local Variables:
# eval: (require (quote ob-shell))
# eval: (require (quote ob-lisp))
# eval: (require (quote ob-emacs-lisp))
# eval: (require (quote ob-js))
# eval: (require (quote ob-go))
# org-confirm-babel-evaluate: nil
# End:
